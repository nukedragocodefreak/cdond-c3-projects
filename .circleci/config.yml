version: 2.1

#orbs: 
#  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
     #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
   # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
           npm install
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
           cd backend
           npm install
           npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end Unit Test
          command: |
            cd backend
            npm install
            npm test
            
  scan-frontend:
     docker:
       - image: circleci/node:13.8.0
     steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end 
          command: |
            cd frontend
            npm install
            npm audit fix  --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
     docker:
       - image: circleci/node:13.8.0
     steps:
       - checkout
       - restore_cache:
            keys: [backend-build]
       - run:
            name: Scan back-end
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              #npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli  # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install_ansible
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:
          fingerprints: ["9a:ac:97:ca:1d:78:4b:91:e0:d7:48:24:54:7f:2f:ef:8a:36:09:ef"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Get the environment variables from CircleCI and add to the EC2 instance

      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "frontend/.env"
            echo TYPEORM_CONNECTION=postgres >> "frontend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "frontend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "frontend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "frontend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "frontend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "frontend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "frontend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "frontend/.env"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:

      # Docker image here that supports NodeJS
     
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Run migrations
          command: |        
            cd backend
            npm install
             # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |   
           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
           then
           # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
           curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
           # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
           curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
           fi

     # Here's where you will add some code to rollback on failure      

  #deploy-frontend:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #          export API_URL="http://${BACKEND_IP}:3030"
  #          echo "${API_URL}"
  #    - run:
  #        name: Deploy frontend objects
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
  #  docker:
  #    # Docker image here that supports Ansible
  #  steps:
  #    # Checkout code from git
  #    # Add ssh keys with fingerprint
  #    # attach workspace
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Deploy backend
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

  #smoke-test:
  #  docker:
  #    # Lightweight Docker image 
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Get backend url
  #        command: |
  #          # your code here
  #    - run:
  #        name: Backend smoke test.
  #        command: |
  #          # your code here
  #    - run:
  #        name: Frontend smoke test.
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

  #cloudfront-update:
  #  docker:
  #    # Docker image here that supports AWS CLI
  #  steps:
  #    # Checkout code from git
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          # your code here
  #    - run:
  #        name: Update cloudfront distribution
  #        command: |
  #          # your code here
  #    # Here's where you will add some code to rollback on failure  

#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]